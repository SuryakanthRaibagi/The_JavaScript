#Browser Console

________document.getElementById('')
document.getElementById('title')
<h1 id=​"title" class=​"heading">​DOM learning on Home​</h1>​
document.getElementById('title').id
'title'
document.getElementById('title').class
undefined
document.getElementById('title').classname
undefined
document.getElementById('title').className
'heading'
document.getElementById('title').getAttribute
ƒ getAttribute() { [native code] }
document.getElementById('title').getAttribute()
VM140:1 Uncaught TypeError: Failed to execute 'getAttribute' on 'Element': 1 argument required, but only 0 present.
    at <anonymous>:1:34
(anonymous) @ VM140:1
document.getElementById('title').getAttribute('id')
'title'
document.getElementById('title').getAttribute('class')
'heading'
document.getElementById('title').setAttribute('class','test')
undefined
document.getElementById('title').setAttribute('class','test','heading')
undefined
document.getElementById('title').setAttribute('class','test heading')
undefined
document.getElementById('title')
<h1 id=​"title" class=​"test heading">​DOM learning on Home​</h1>​
const title=document.getElementById('title')
undefined
title
<h1 id=​"title" class=​"test heading">​DOM learning on Home​</h1>​
title.style.backgroundColor='green';
'green'
title.style.padding="15px"
'15px'
title.style.borderRadius="10px"
'10px'

____________Intristing ______________
______textContent  vs  innerText  vs innerHTML_____

itle.textContent
'DOM learning on HomeTest Text'
title.innerText
'DOM learning on Home'
title.innerHTML
'DOM learning on Home<spam style="display: none;">Test Text</spam>'
testing values


______________document.getElementsByClassName('')

document.getElementsByClassName('heading')
HTMLCollection [h1#title.heading, title: h1#title.heading]


_____________document.querySelector('')
document.querySelector('h1')
<h1 id=​"title" class=​"heading">​…​</h1>​
document.querySelector('h2')
<h2>​Hello My friends1​</h2>​


________________if we want idthen
document.querySelector('#title')
<h1 id=​"title" class=​"heading">​…​</h1>​

________________if we want class then

document.querySelector('.heading')
<h1 id=​"title" class=​"heading">​…​</h1>​

________________if we want input and want to target type then
document.querySelector('input')
null---Becouse there was no input type in HTML Page 
document.querySelector('input[type="password"]')
null---Becouse there was no input type in HTML Page 


______________querySelector('')
nt.querySelector('ul')
<ul>​<li>​…​</li>​<li>​…​</li>​<li>​…​</li>​</ul>​
const myul=document.querySelector('ul')
undefined
myul.querySelector('li')
<li>​…​</li>​
const turngreen=myul.querySelector('li')
undefined
turngreen.style.backgroundColor="green"
'green'
turngreen.style.padding="10px"
'10px'
turngreen.innerText
'one'
turngreen.innerText="five"
'five'

__________________querySelectorAll('') 
__Note when we use querySelectorAll the it will provide a NodeList which looks like an Array but it is not 
__ and we also can't apply loops to it but we can convert that Node List in to Array
ent.querySelectorAll('li')

NodeList(3) [li, li, li]0: li1: li2: lilength: 3[[Prototype]]: NodeListentries: ƒ entries()forEach: ƒ forEach()item: ƒ item()keys: ƒ keys()length: (...)values: ƒ values()constructor: ƒ NodeList()Symbol(Symbol.iterator): ƒ values()Symbol(Symbol.toStringTag): "NodeList"get length: ƒ length()[[Prototype]]: Object

const templiList=document.querySelectorAll('li')
undefined

templiList
NodeList(3) [li, li, li]

__________Nodelist is not an array IMP 

__ex array
const myArr=[1,2,3,4]
undefined
myArr
(4) [1, 2, 3, 4]0: 11: 22: 33: 4length: 4[[Prototype]]: Array(0)at: ƒ at()concat: ƒ concat()constructor: ƒ Array()copyWithin: ƒ copyWithin()entries: ƒ entries()every: ƒ every()fill: ƒ fill()filter: ƒ filter()find: ƒ find()findIndex: ƒ findIndex()findLast: ƒ findLast()findLastIndex: ƒ findLastIndex()flat: ƒ flat()flatMap: ƒ flatMap()forEach: ƒ forEach()includes: ƒ includes()indexOf: ƒ indexOf()join: ƒ join()keys: ƒ keys()lastIndexOf: ƒ lastIndexOf()length: 0map: ƒ map()pop: ƒ pop()push: ƒ push()reduce: ƒ reduce()reduceRight: ƒ reduceRight()reverse: ƒ reverse()shift: ƒ shift()slice: ƒ slice()some: ƒ some()sort: ƒ sort()splice: ƒ splice()toLocaleString: ƒ toLocaleString()toReversed: ƒ toReversed()toSorted: ƒ toSorted()toSpliced: ƒ toSpliced()toString: ƒ toString()unshift: ƒ unshift()values: ƒ values()with: ƒ with()Symbol(Symbol.iterator): ƒ values()Symbol(Symbol.unscopables): {at: true, copyWithin: true, entries: true, fill: true, find: true, …}[[Prototype]]: Object

____________ex Conversion Nodelist to Array

liList=document.querySelectorAll('li')
undefined

templiList
NodeList(3) [li, li, li]

templiList[0].style.color='green'
'green'

const myH1=document.querySelectorAll('h1')
undefined

myH1[0].style.color='green'
'green'

templiList
NodeList(3) [li, li, li]

templiList.forEach(function (l) {
    l.style.backgroundColor='green'
})
undefined
all green
_______________Note:---     VM2726:1 Uncaught SyntaxError: Unexpected identifier 'green'
_________________________

____________________document.ElementsByClassName('')

document.ElementsByClassName('listItem')
HTMLCollection(4) [li.listItem, li.listItem, li.listItem, li.listItem]0: li.listItem1: li.listItem2: li.listItem3: li.listItemlength: 4[[Prototype]]: HTMLCollectionitem: ƒ item()length: (...)namedItem: ƒ namedItem()constructor: ƒ HTMLCollection()Symbol(Symbol.iterator): ƒ values()Symbol(Symbol.toStringTag): "HTMLCollection"get length: ƒ length()[[Prototype]]: Object

_____________no loops so  lets see if we can apply forecah

const tempClassList=document.getElementsByClassName('listItem')
undefined

tempClassList
HTMLCollection(4) [li.listItem, li.listItem, li.listItem, li.listItem]

tempClassList.forEach(function (li) {
    console.log(li)
})
VM3097:1 Uncaught TypeError: tempClassList.forEach is not a function
    at <anonymous>:1:15
(anonymous) @ VM3097:1

_______________if we want to use we need to convert it lets see

tempClassList
HTMLCollection(4) [li.listItem, li.listItem, li.listItem, li.listItem]

Array.from(tempClassList)

(4) [li.listItem, li.listItem, li.listItem, li.listItem]

___________Note:---now we can apply loops now it is in array fromat

const myConvertArray=Array.from(tempClassList)
undefined

myConvertArray
(4) [li.listItem, li.listItem, li.listItem, li.listItem]

myConvertArray.forEach(function (li) {
    li.style.color='orange'
})
undefined

___________________this is how we use HTML collections



____________________Example
document.querySelectorAll('h2')
NodeList(16) [h2.vector-pinnable-header-label, h2, h2, h2, h2, h2, h2, h2, h2, h2, h2, h2, h2, h2, h2, h2]

const allH2=document.querySelectorAll('h2')
undefined

allH2[0].innerText
'Contents'

allH2[1].innerText
'History'

allH2[2].innerText
'Trademark'

myH2

H2.forEach(function (h) {
    h.style.color='red'
})
undefined

myH2.forEach(function (h) {
    h.style.color='black'
})
undefined


myH2.forEach(function (h) {
    h.style.color='black';
    h.style.backgroundColor='green';
    h.style.padding='10px'
})
undefined

myH2.forEach(function (h) {
    h.style.color='black';
    h.style.backgroundColor='green';
    h.style.padding='10px';
    h.innerText="Sury"
})